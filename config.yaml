#
# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: 1.0.0

#
# The client section used by GO SDK.
#
client:
  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: org1

  logging:
    level: info

  cryptoconfig:
    path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config

  credentialStore:
    path: /tmp/fabric-online-demo-store

    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations
    # requiring a key store. PKCS#11 based implementations does not.
    cryptoStore:
      path: /tmp/fabric-online-demo-msp

  BCCSP:
    security:
      enabled: true
      default:
        provider: "SW"
      hashAlgorithm: "SHA2"
      softVerify: true
      level: 256

  tlsCerts:
    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
    systemCertPool: false

    # [Optional]. Client key and cert for TLS handshake with peers and orderers
    client:
      key:
        path:
      cert:
        path: #/opt/gopath/src/github.com/hyperledger/fabric/aberic/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.crt

#
channels:
  mychannel:
    # [Optional]. list of peers from participating orgs
    peers:
      peer0.org1.example.com:
        endorsingPeer: true

        chaincodeQuery: true

        ledgerQuery: true

        eventSource: true
      peer0.org2.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true
      peer0.org3.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true
      peer0.org4.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

    # [Optional]. The application can use these options to perform channel operations like retrieving channel
    # config etc.
    policies:
      queryChannelConfig:
        #[Optional] min number of success responses (from targets/peers)
        minResponses: 1
        #[Optional] channel config will be retrieved for these number of random targets
        maxTargets: 1
        #[Optional] retry options for query config block
        retryOpts:
          #[Optional] number of retry attempts
          attempts: 5
          #[Optional] the back off interval for the first retry attempt
          initialBackoff: 500ms
          #[Optional] the maximum back off interval for any retry attempt
          maxBackoff: 5s
          #[Optional] he factor by which the initial back off period is exponentially incremented
          backoffFactor: 2.0

organizations:
  org1:
    mspid: Org1MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath: peerOrganizations/org1.example.com/users/{userName}@org1.example.com/msp

    peers:
      - peer0.org1.example.com

    certificateAuthorities:
      - ca.org1.example.com
    users:
      Admin:
        cert:
          path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/signcerts/Admin@org1.example.com-cert.pem
      User1:
        cert:
          path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/msp/signcerts/User1@org1.example.com-cert.pem
  org2:
    mspid: Org2MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath: peerOrganizations/org2.example.com/users/{userName}@org2.example.com/msp

    peers:
      - peer0.org2.example.com

    certificateAuthorities:
      - ca.org2.example.com
    users:
      Admin:
        cert:
          path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/signcerts/Admin@org2.example.com-cert.pem
      User1:
        cert:
          path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org2.example.com/users/User1@org2.example.com/msp/signcerts/User1@org2.example.com-cert.pem

  org3:
    mspid: Org3MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath: peerOrganizations/org3.example.com/users/{userName}@org3.example.com/msp

    peers:
      - peer0.org3.example.com

    certificateAuthorities:
      - ca.org3.example.com
    users:
      Admin:
        cert:
          path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org3.example.com/users/Admin@org3.example.com/msp/signcerts/Admin@org3.example.com-cert.pem
      User1:
        cert:
          path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org3.example.com/users/User1@org3.example.com/msp/signcerts/User1@org3.example.com-cert.pem

  org4:
    mspid: Org4MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath: peerOrganizations/org4.example.com/users/{userName}@org4.example.com/msp

    peers:
      - peer0.org4.example.com

    certificateAuthorities:
      - ca.org4.example.com
    users:
      Admin:
        cert:
          path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org4.example.com/users/Admin@org4.example.com/msp/signcerts/Admin@org4.example.com-cert.pem
      User1:
        cert:
          path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org4.example.com/users/User1@org4.example.com/msp/signcerts/User1@org4.example.com-cert.pem

  # Orderer Org name
  ordererorg:
    # Membership Service Provider ID for this organization
    mspID: Org1MSP

    # Needed to load users crypto keys and certs for this org (absolute path or relative to global crypto path, DEV mode)
    cryptoPath: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp

#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer0.example.com:
    # [Optional] Default: Infer from hostname
    url: 54.255.239.58:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer0.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

  orderer1.example.com:
    # [Optional] Default: Infer from hostname
    url: 13.229.49.131:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer1.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

  orderer2.example.com:
    # [Optional] Default: Infer from hostname
    url: 54.179.169.147:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer2.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

  # orderer3.example.com:
  #   # [Optional] Default: Infer from hostname
  #   url: 52.77.242.99:7050

  #   # these are standard properties defined by the gRPC library
  #   # they will be passed in as-is to gRPC client constructor
  #   grpcOptions:
  #     ssl-target-name-override: orderer3.example.com
  #     # These parameters should be set in coordination with the keepalive policy on the server,
  #     # as incompatible settings can result in closing of connection.
  #     # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
  #     keep-alive-time: 0s
  #     keep-alive-timeout: 20s
  #     keep-alive-permit: false
  #     fail-fast: false
  #     # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
  #     allow-insecure: false

  #   tlsCACerts:
  #     # Certificate location absolute path
  #     path: ${GOPATH}/src/github.com/lhybdv/fabric-online-demo/fixtures/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.org1.example.com:
    url: 54.255.239.58:7051
    eventUrl: 54.255.239.58:7053
    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem

  peer0.org2.example.com:
    url: 13.229.49.131:7051
    eventUrl: 13.229.49.131:7053
    grpcOptions:
      ssl-target-name-override: peer0.org2.example.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem

  peer0.org3.example.com:
    url: 54.179.169.147:7051
    eventUrl: 54.179.169.147:7053
    grpcOptions:
      ssl-target-name-override: peer0.org3.example.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org3.example.com/tlsca/tlsca.org3.example.com-cert.pem

  peer0.org4.example.com:
    url: 52.77.242.99:7051
    eventUrl: 52.77.242.99:7053
    grpcOptions:
      ssl-target-name-override: peer0.org4.example.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org4.example.com/tlsca/tlsca.org4.example.com-cert.pem

certificateAuthorities:
  ca.org1.example.com:
    # [Optional] Default: Infer from hostname
    url: http://54.255.239.58:7054
    httpOptions:
      verify: false
    # [Optional] The optional server name for target override
    #grpcOptions:
    #  ssl-target-name-override: ca.org1.example.com
    tlsCACerts:
      # Comma-Separated list of paths
      path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org1.example.com/ca/ca.org1.example.com-cert.pem
      # Client key and cert for SSL handshake with Fabric CA
      client:
        key:
          path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.key
        cert:
          path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.crt

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      enrollId: admin
      enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    caName: ca.org1.example.com
  ca.org2.example.com:
    url: http://13.229.49.131:7054
    # [Optional] The optional server name for target override
    #grpcOptions:
    #  ssl-target-name-override: ca.org2.example.com
    tlsCACerts:
      # Comma-Separated list of paths
      path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem
      # Client key and cert for SSL handshake with Fabric CA
      client:
        key:
          path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org2.example.com/users/User1@org2.example.com/tls/client.key
        cert:
          path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org2.example.com/users/User1@org2.example.com/tls/client.crt

      # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
      # needed to enroll and invoke new users.
    registrar:
      enrollId: admin
      enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    caName: ca.org2.example.com

  ca.org3.example.com:
    url: http://54.179.169.147:7054
    # [Optional] The optional server name for target override
    #grpcOptions:
    #  ssl-target-name-override: ca.org2.example.com
    tlsCACerts:
      # Comma-Separated list of paths
      path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org3.example.com/tlsca/tlsca.org3.example.com-cert.pem
      # Client key and cert for SSL handshake with Fabric CA
      client:
        key:
          path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org3.example.com/users/User1@org3.example.com/tls/client.key
        cert:
          path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org3.example.com/users/User1@org3.example.com/tls/client.crt

      # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
      # needed to enroll and invoke new users.
    registrar:
      enrollId: admin
      enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    caName: ca.org3.example.com

  ca.org4.example.com:
    url: http://52.77.242.99:7054
    # [Optional] The optional server name for target override
    #grpcOptions:
    #  ssl-target-name-override: ca.org2.example.com
    tlsCACerts:
      # Comma-Separated list of paths
      path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org4.example.com/tlsca/tlsca.org4.example.com-cert.pem
      # Client key and cert for SSL handshake with Fabric CA
      client:
        key:
          path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org4.example.com/users/User1@org4.example.com/tls/client.key
        cert:
          path: ${GOPATH}/src/github.com/trias-lab/fabric-sdk-demo/fixtures/crypto-config/peerOrganizations/org4.example.com/users/User1@org4.example.com/tls/client.crt

      # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
      # needed to enroll and invoke new users.
    registrar:
      enrollId: admin
      enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    caName: ca.org4.example.com

# EntityMatchers enable substitution of network hostnames with static configurations
# so that properties can be mapped. Regex can be used for this purpose
# UrlSubstitutionExp can be empty which means the same network hostname will be used
# UrlSubstitutionExp can be given same as mapped peer url, so that mapped peer url can be used
# UrlSubstitutionExp can have golang regex matchers like ${1}.local.example.${2}:${3} for pattern
# like peer0.org1.example.com:1234 which converts peer0.org1.example.com to peer0.org1.local.example.com:1234
# sslTargetOverrideUrlSubstitutionExp follow in the same lines as
# SubstitutionExp for the fields gprcOptions.ssl-target-name-override respectively
# In any case mappedHost's config will be used, so mapped host cannot be empty, if entityMatchers are used
#entityMatchers:
entityMatchers:
  peer:
    - pattern: (\w*)peer0.org1.example.com(\w*)
      urlSubstitutionExp: 54.255.239.58:7051
      eventUrlSubstitutionExp: 54.255.239.58:7053
      sslTargetOverrideUrlSubstitutionExp: peer0.org1.example.com
      mappedHost: peer0.org1.example.com

    - pattern: (\w*)peer0.org2.example.com(\w*)
      urlSubstitutionExp: 13.229.49.131:7051
      eventUrlSubstitutionExp: 13.229.49.131:7053
      sslTargetOverrideUrlSubstitutionExp: peer0.org2.example.com
      mappedHost: peer0.org2.example.com

    - pattern: (\w*)peer0.org3.example.com(\w*)
      urlSubstitutionExp: 54.179.169.147:7051
      eventUrlSubstitutionExp: 54.179.169.147:7053
      sslTargetOverrideUrlSubstitutionExp: peer0.org3.example.com
      mappedHost: peer0.org3.example.com

    - pattern: (\w*)peer0.org4.example.com(\w*)
      urlSubstitutionExp: 52.77.242.99:7051
      eventUrlSubstitutionExp: 52.77.242.99:7053
      sslTargetOverrideUrlSubstitutionExp: peer0.org4.example.com
      mappedHost: peer0.org4.example.com

  # peer:
  #   - pattern: (\w*)peer0.org1.example.com(\w*)
  #     urlSubstitutionExp: peer0.org1.example.com:7051
  #     eventUrlSubstitutionExp: peer0.org1.example.com:7053
  #     sslTargetOverrideUrlSubstitutionExp: peer0.org1.example.com
  #     mappedHost: peer0.org1.example.com

  #   - pattern: (\w*)peer0.org2.example.com(\w*)
  #     urlSubstitutionExp: peer0.org2.example.com:7051
  #     eventUrlSubstitutionExp: peer0.org2.example.com:7053
  #     sslTargetOverrideUrlSubstitutionExp: peer0.org2.example.com
  #     mappedHost: peer0.org2.example.com

  #   - pattern: (\w*)peer0.org3.example.com(\w*)
  #     urlSubstitutionExp: peer0.org3.example.com:7051
  #     eventUrlSubstitutionExp: peer0.org1.example.com:7053
  #     sslTargetOverrideUrlSubstitutionExp: peer0.org3.example.com
  #     mappedHost: peer0.org3.example.com

  #   - pattern: (\w*)peer0.org4.example.com(\w*)
  #     urlSubstitutionExp: peer0.org4.example.com:7051
  #     eventUrlSubstitutionExp: peer0.org4.example.com:7053
  #     sslTargetOverrideUrlSubstitutionExp: peer0.org4.example.com
  #     mappedHost: peer0.org4.example.com

  orderer:
    - pattern: (\w*)orderer0.example.com(\w*)
      urlSubstitutionExp: 54.255.239.58:7050
      sslTargetOverrideUrlSubstitutionExp: orderer0.example.com
      mappedHost: orderer0.example.com

    - pattern: (\w*)orderer1.example.com(\w*)
      urlSubstitutionExp: 13.229.49.131:7050
      sslTargetOverrideUrlSubstitutionExp: orderer1.example.com
      mappedHost: orderer1.example.com

    - pattern: (\w*)orderer2.example.com(\w*)
      urlSubstitutionExp: 54.179.169.147:7050
      sslTargetOverrideUrlSubstitutionExp: orderer2.example.com
      mappedHost: orderer2.example.com

  certificateAuthorities:
    - pattern: (\w*)ca.org1.example.com(\w*)
      urlSubstitutionExp: http://54.255.239.58:7054
      mappedHost: ca.org1.example.com

    - pattern: (\w*)ca.org2.example.com(\w*)
      urlSubstitutionExp: http://13.229.49.131:7054
      mappedHost: ca.org2.example.com

    - pattern: (\w*)ca.org3.example.com(\w*)
      urlSubstitutionExp: http://54.179.169.147:7054
      mappedHost: ca.org3.example.com
